<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>背包模板</title>
    <link href="/2025/07/03/%E8%83%8C%E5%8C%85%E6%A8%A1%E6%9D%BF/"/>
    <url>/2025/07/03/%E8%83%8C%E5%8C%85%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>01背包：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=v[i];j--)<br>    &#123;<br>        dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-v[i]]+w[i]);<br>    &#125;<br>&#125;<br>```  <br>完全背包：<br>```<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=v[i];j&lt;=m;j++)<br>    &#123;<br>        dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-v[i]]+w[i]);<br>    &#125;<br>&#125;<br>```  <br>多重背包<br>```<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=<span class="hljs-number">1</span>;j--)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=s[i]&amp;&amp;k*v[i]&lt;=j;k++)<br>&#123;<br>dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-k*v[i]]+k*w[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心二</title>
    <link href="/2025/06/29/%E8%B4%AA%E5%BF%83%E4%BA%8C/"/>
    <url>/2025/06/29/%E8%B4%AA%E5%BF%83%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;主包也是考完了，回来做点笔记。<br>&emsp;&emsp;上次讲到贪心的概念，这次讲点别的。贪心思路往往渗透到各种题目中，根据模型和结构不同，通常分为<strong>散点</strong>、<strong>线段</strong>和<strong>树</strong>模型。  </p><h3 id="散点贪心"><a href="#散点贪心" class="headerlink" title="散点贪心"></a>散点贪心</h3><p>&emsp;&emsp;散点贪心是贪心的变体，通常用于解决离散点和离散事件的最优化问题。它的核心思想是在离散的点或事件上做出局部最优选择，从而逼近全局最优解。</p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心一</title>
    <link href="/2025/06/16/%E8%B4%AA%E5%BF%83%E4%B8%80/"/>
    <url>/2025/06/16/%E8%B4%AA%E5%BF%83%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;实际上，我们解决的每一个问题，都可以分成几个步骤。而贪心算法，则为每一个步骤都为<strong>局部最优解</strong>。  </p><p>&emsp;&emsp;当每一步都采用局部最优解，<strong>可以取到最终最优解</strong>时，便可以使用贪心算法。  </p><p>&emsp;&emsp;通过<strong>数据规模</strong>和<strong>题目信息</strong>联想。常见复杂度<strong>O(n)</strong> 或排序 <strong>O(n log n)</strong>。  </p><p>&emsp;&emsp;常见策略：<strong>按xx排序</strong>，<strong>能选就选</strong>，<strong>尽量选最优</strong>等等。  </p><p>&emsp;&emsp;那么，你写好一个贪心，如何检查是否正确呢？从正反两面入手，试图<strong>构造反例</strong>。从算法漏洞构造反例的过程也是很好的证明过程。考虑证明每一次选取的答案，每一次都被<strong>至少一个正确答案</strong>包含，这样最后一定不会失去所有正确答案。或者，考虑证明贪心得到的答案中，交换任意两个相邻元素，都不会使答案更优。  </p><p>&emsp;&emsp;有一些小朋友就要问了：“主包主包，我的算法证不出来，也找不到反例啊！”不慌不慌，我来教你。  </p><p>&emsp;&emsp;代码不长，测试大小样例，对拍暴力，通过大概率就对了。实在不行，多写几个贪心凑起来骗分。有排行榜，看看别人的通过速度，通过较多再试试，否则要多想。  </p><p>&emsp;&emsp;贪心作为<strong>算法思想</strong>常与其他算法<strong>搭配使用</strong>。很难见到只依赖贪心一个算法的题目。但，贪心发现的性质可能是<strong>构建解题思路的基础</strong>。  </p><p>&emsp;&emsp;题外话：小升初在即，短暂停更。不要想我！</p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建站祭</title>
    <link href="/2025/06/14/%E5%BB%BA%E7%AB%99%E7%A5%AD/"/>
    <url>/2025/06/14/%E5%BB%BA%E7%AB%99%E7%A5%AD/</url>
    
    <content type="html"><![CDATA[<p>2025年的6月14日，成功建造此站。<br>我会在这里写字，写字和写字</p>]]></content>
    
    
    
    <tags>
      
      <tag>祭文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/06/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/06/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
